// @file	session.cpp
//
//

#include "session.h"

#include "message_buffer.h"
#include "socket_async.h"

namespace shared
{
	////////////////////////////////////////////////////////////////////////////////
	//
	////////////////////////////////////////////////////////////////////////////////
	Session::Session()
		: _socket(nullptr)
		, _recv_buf()
	{

	}

	////////////////////////////////////////////////////////////////////////////////
	//
	////////////////////////////////////////////////////////////////////////////////
	Session::~Session()
	{

	}

	////////////////////////////////////////////////////////////////////////////////
	//
	////////////////////////////////////////////////////////////////////////////////
	INT32	Session::initialize(const SOCKET& socket_in)
	{
		_socket = new lib::SocketAsync();

		INT32 result = _socket->initialize(socket_in);
		if (ERR_SUCCEEDED != result)
		{
			return result;
		}

		return ERR_SUCCEEDED;
	}

	////////////////////////////////////////////////////////////////////////////////
	//
	////////////////////////////////////////////////////////////////////////////////
	INT32	Session::initialize(lib::SocketAsync* socket_in)
	{
		_socket = socket_in;

		return ERR_SUCCEEDED;
	}

	////////////////////////////////////////////////////////////////////////////////
	//
	////////////////////////////////////////////////////////////////////////////////
	VOID	Session::close()
	{

	}

	////////////////////////////////////////////////////////////////////////////////
	//
	////////////////////////////////////////////////////////////////////////////////
	INT32 Session::receive()
	{
		
		INT32 result = _socket->receive_async(&_recv_buf);
		if (ERR_SUCCEEDED != result)
		{
			return result;
		}

		return ERR_SUCCEEDED;
	}
}