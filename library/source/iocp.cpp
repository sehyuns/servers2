// @file	iocp.cpp
//
//

#include "iocp.h"


namespace lib
{
	////////////////////////////////////////////////////////////////////////////////
	//
	////////////////////////////////////////////////////////////////////////////////
	Iocp::Iocp() : _handle(INVALID_HANDLE_VALUE), _last_error(0)
	{

	}

	////////////////////////////////////////////////////////////////////////////////
	//
	////////////////////////////////////////////////////////////////////////////////
	Iocp::~Iocp()
	{

	}

	////////////////////////////////////////////////////////////////////////////////
	//
	////////////////////////////////////////////////////////////////////////////////
	INT32	Iocp::initialize()
	{
		_handle = CreateIoCompletionPort(INVALID_HANDLE_VALUE, nullptr, 0, 0);
		if (INVALID_HANDLE_VALUE == _handle)
		{
			_last_error = WSAGetLastError();
			return ERR_IOCP_CREATE;
		}

		return ERR_SUCCEEDED;
	}

	////////////////////////////////////////////////////////////////////////////////
	//
	////////////////////////////////////////////////////////////////////////////////
	VOID	Iocp::close()
	{
		CloseHandle(_handle);
		_handle = INVALID_HANDLE_VALUE;
	}

	////////////////////////////////////////////////////////////////////////////////
	//
	////////////////////////////////////////////////////////////////////////////////
	INT32 Iocp::associate(const SOCKET& socket_in)
	{
		HANDLE result = CreateIoCompletionPort((HANDLE)socket_in, _handle, (INT32)socket_in, 0);
		if (INVALID_HANDLE_VALUE == result)
		{
			_last_error = WSAGetLastError();
			return ERR_IOCP_NEW;
		}
		return ERR_SUCCEEDED;
	}

	////////////////////////////////////////////////////////////////////////////////
	//
	////////////////////////////////////////////////////////////////////////////////
	INT32 Iocp::pop_income(INT32& key_out, UINT32& bytes_out, LPOVERLAPPED* overlapped_out)
	{
		if (FALSE == GetQueuedCompletionStatus(_handle, (LPDWORD)&bytes_out, (PULONG_PTR)&key_out, &*overlapped_out, INFINITE))
		{
			_last_error = WSAGetLastError();
			return ERR_IOCP_QUEUE;
		}

		if (0 == bytes_out || nullptr == overlapped_out)
			return ERR_IOCP_QUEUE;

		return ERR_SUCCEEDED;
	}

	////////////////////////////////////////////////////////////////////////////////
	//
	////////////////////////////////////////////////////////////////////////////////
	INT32 Iocp::push_forcely(INT32 key_in, OVERLAPPED * overlapped_in)
	{
		if (FALSE == PostQueuedCompletionStatus(_handle, 1, key_in, overlapped_in))
		{
			_last_error = WSAGetLastError();
			return ERR_IOCP_POST;
		}

		return ERR_SUCCEEDED;
	}
}